# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input AdministratorInput {
  api_token: String
  cnpj: String
  cpf: String
  created_at: DateTimeISO
  dateOfBirth: DateTimeISO
  deleted_at: DateTimeISO
  email: String
  id: String
  name: String
  password: String
  phone: String
  role: String
  situacao: Boolean
  updated_at: DateTimeISO
}

type AdministratorModel {
  api_token: String
  cnpj: String
  cpf: String
  created_at: DateTimeISO
  dateOfBirth: DateTimeISO
  deleted_at: DateTimeISO
  email: String
  id: ID!
  name: String
  password: String
  phone: String
  role: String
  situacao: Boolean
  updated_at: DateTimeISO
}

input BrandInput {
  name: String
}

type BrandModel {
  id: ID
  name: String
}

input CategoryInput {
  name: String
}

type CategoryModel {
  id: ID
  name: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

input MailInput {
  assunto: String
  corpo: String
  data_cadastro: DateTimeISO
  data_envio: DateTimeISO
  email: String
  id: Float
  origem: String
  situacao_envio: String
}

type MailModel {
  assunto: String
  corpo: String
  data_cadastro: DateTimeISO
  data_envio: DateTimeISO
  email: String
  id: ID
  origem: String
  situacao_envio: String
}

type Mutation {
  CreateProduto(produto: ProductInput!): ProductModel!
  DeleteBrand(id: String!): BrandModel
  DeleteCategory(id: String!): CategoryModel
  DeleteProduto(id: String!): ProductModel
  DeleteUsuario(id: String!): UserModel!
  PutMailQueue(id: Float!): MailModel!
  PutUsuario(id: String!, usuario: UserInput!): UserModel!
  SetCategoria(categoria: CategoryInput!): CategoryModel!
  SetMailQueue(data: MailInput!): MailModel!
  SetMarca(marca: BrandInput!): BrandModel!
  SetUsuarioAdmin(administador: AdministratorInput!): AdministratorModel!
  UpdateBrand(id: String!, marca: BrandInput!): BrandModel
  UpdateCategory(categoria: CategoryInput!, id: String!): CategoryModel
  UpdateProduto(id: String!, produto: ProductInput!): ProductModel
}

input Pagination {
  pagina: Float
  quantidade: Float
}

input ProductInput {
  brandId: String
  code: String
  depth: Float
  description: String
  expirationDate: DateTimeISO
  format: String
  freeShipping: Boolean
  grossWeight: Float
  height: Float
  image: String
  itemsPerBox: Float
  name: String
  netWeight: Float
  price: Float
  situation: Boolean
  stock: Float
  supplierId: String
  unitOfMeasurement: String
  volumes: Float
  width: Float
}

type ProductModel {
  brandId: String
  code: String
  depth: Float
  description: String
  expirationDate: DateTimeISO
  format: String
  freeShipping: Boolean
  grossWeight: Float
  height: Float
  image: String
  itemsPerBox: Float
  name: String
  netWeight: Float
  price: Float
  situation: Boolean
  stock: Float
  supplierId: String
  unitOfMeasurement: String
  volumes: Float
  width: Float
}

type Query {
  GetCategoriaByID(id: String!): CategoryModel
  GetCategorias(pagination: Pagination): [CategoryModel!]!
  GetMailQueue: [MailModel!]!
  GetMarcaByID(id: String!): BrandModel
  GetMarcas(pagination: Pagination): [BrandModel!]!
  GetProdutoById(id: String!): ProductModel
  GetProdutos(pagination: Pagination): [ProductModel!]!
  GetUsuarioByID(id: String!): UserModel!
  GetUsuarios(pagination: Pagination): [UserModel!]!
}

input UserInput {
  address: String
  api_token: String
  cep: String
  cnpj: String
  complement: String
  cpf: String
  created_at: DateTimeISO
  deleted_at: DateTimeISO
  email: String
  fullName: String
  id: String
  isWhatsapp: Boolean
  number: String
  password: String
  phone: String
  situacao: Boolean
  theme: String
  updated_at: DateTimeISO
}

type UserModel {
  address: String
  api_token: String
  cep: String
  cnpj: String
  complement: String
  cpf: String
  created_at: DateTimeISO
  deleted_at: DateTimeISO
  email: String
  fullName: String
  id: ID
  isWhatsapp: Boolean
  number: String
  password: String
  phone: String
  situacao: Boolean
  theme: String
  updated_at: DateTimeISO
}