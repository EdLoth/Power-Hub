generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TypePerson {
  ADMIN
  USER
  EMPLOYEE
  MANAGER
}

model User {
  id          String      @id @default(uuid())
  api_token   String?
  name        String
  email       String      @unique
  password    String
  role        String
  phone       String
  cpf         String?     @unique
  cnpj        String?     @unique
  dateOfBirth DateTime?
  situacao    Boolean
  isWhatsapp  Boolean // Campo isWhatsapp adicionado
  cep         String?
  address     String?
  number      String?
  complement  String?
  theme       String?
  created_at  DateTime    @default(now())
  deleted_at  DateTime?
  updated_at  DateTime    @updatedAt
  type_person TypePerson  @default(USER)
  avaliacoes  Avaliacao[] // Relação com as avaliações feitas pelo usuário
}

model Produto {
  id                String      @id @default(uuid())
  code              String      @unique
  name              String
  description       String
  stock             Int
  supplier_id       String?
  brandId           String?
  price             Float
  format            String?
  expirationDate    DateTime?
  freeShipping      Boolean
  netWeight         Float?
  grossWeight       Float?
  width             Float?
  height            Float?
  depth             Float?
  volumes           Int?
  itemsPerBox       Int?
  unitOfMeasurement String?
  situation         Boolean
  image             String?
  brand             Marca?      @relation(fields: [brandId], references: [id])
  categories        Categoria[] @relation("CategoriaToProduto")
  avaliacoes        Avaliacao[] // Relação com as avaliações do produto
}

model Avaliacao {
  id         String   @id @default(uuid())
  nota       Int // Nota atribuída à avaliação
  comentario String? // Comentário opcional
  produto    Produto  @relation(fields: [produtoId], references: [id])
  produtoId  String // Referência ao ID do produto avaliado
  usuario    User     @relation(fields: [usuarioId], references: [id])
  usuarioId  String // Referência ao ID do usuário que fez a avaliação
  createdAt  DateTime @default(now())
}

model Categoria {
  id       String    @id @default(uuid())
  name     String    @unique
  produtos Produto[] @relation("CategoriaToProduto")
}

model Marca {
  id       String    @id @default(uuid())
  name     String    @unique
  produtos Produto[]
}

model Pedido {
  id                  Int      @id @default(autoincrement())
  numero              Int
  data                DateTime
  dataPrevista        DateTime
  totalProdutos       Float
  total               Float
  ordemCompra         String
  observacoes         String
  observacoesInternas String
}

model Mail {
  id             Int       @id @default(autoincrement())
  assunto        String?   @db.VarChar(445)
  corpo          String?   @db.Text
  email          String?   @db.VarChar(245)
  data_cadastro  DateTime?
  data_envio     DateTime?
  situacao_envio Int?
  origem         String?   @db.VarChar(100)
}

model track_log {
  id          Int       @id @default(autoincrement())
  id_modulo   Int?
  resolver    String?   @db.VarChar(255)
  action      String?   @db.VarChar(150)
  data_acesso DateTime?
  param       String?   @db.VarChar(255)
  hash_acesso String?   @db.VarChar(500)
  user_id     Int?
  ip          String?   @db.VarChar(45) 
}
